name: set up copilot docker build
description: determine docker tag based on git sha, log in to ECR and check if tag already exists

inputs:
  service_name:
    description: the copilot service name
    required: true
  forbid_build:
    description: fail the build if the image tag doesn't already exist in ECR. useful to ensure we don't build a new image for production deploys.
    required: false
  environment:
    description: if specified, a docker tag for the environment will be returned as well.
    required: false
outputs:
  tag:
    description: the docker image tag to build (or already found)
    value: ${{ steps.image-tag.outputs.tag }}
  tag_latest:
    description: docker image tag for :latest
    value: ${{ steps.image-tag.outputs.tag_latest }}
  tag_environment:
    description: docker image tag for environment, if given as input
    value: ${{ steps.image-tag.outputs.tag_environment }}
  tag_exists:
    description: true if the docker image exists for this git sha already
    value: ${{ steps.check-existing.outputs.exists }}
  git_sha_short:
    description: the short git sha (used in the docker tag as well)
    value: ${{ steps.image-tag.outputs.ref }}

runs:
  using: composite
  steps:
    - name: get copilot app name
      id: app-name
      shell: bash
      run: |
        app=$(yq .application copilot/.workspace)
        echo "name=$app" >> $GITHUB_OUTPUT
        echo "ecr=$app/${{inputs.service_name}}" >> $GITHUB_OUTPUT
    - name: log in to AWS ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    - name: define image tag
      id: image-tag
      shell: bash
      run: |
        ref=$(git rev-parse --short HEAD)
        longref=$(git rev-parse HEAD)
        base_img="${{steps.login-ecr.outputs.registry}}/${{steps.app-name.outputs.ecr}}"
        tag="${base_img}:${ref}"
        tag_latest="${base_img}:latest"
        if [[ -n "${{inputs.environment}}" ]]; then
          tag_environment="${base_img}:${{inputs.environment}}"
        fi
        echo 'ref='$ref >> $GITHUB_OUTPUT
        echo 'longref='$longref >> $GITHUB_OUTPUT
        echo 'tag='$tag >> $GITHUB_OUTPUT
        echo 'tag_latest='$tag_latest >> $GITHUB_OUTPUT
        echo 'tag_environment='$tag_environment >> $GITHUB_OUTPUT
    - name: write out version file
      shell: bash
      run: |
        mkdir -p lumio-platform
        yq -n '.git-sha.short = "${{ steps.image-tag.outputs.ref }}" | .git-sha.long = "${{ steps.image-tag.outputs.longref }}"' > lumio-platform/app-version.yml
    - name: check if tag exists
      id: check-existing
      shell: bash
      run: |
        exitcode=0
        output=$(aws ecr describe-images --repository-name ${{steps.app-name.outputs.ecr}} --image-ids imageTag=${{steps.image-tag.outputs.ref}} 2>&1) || exitcode=$?

        if [[ $exitcode -eq 0 ]]; then
          echo "image already exists: ${{steps.image-tag.outputs.tag}}"
          echo 'exists=true' >> $GITHUB_OUTPUT
        else
          if echo $output | grep -q 'ImageNotFoundException'; then
            echo "image does not exist: ${{steps.image-tag.outputs.tag}}"
            # no writing to $GITHUB_OUTPUT means it will evaluate to false
          else
            echo 'failed trying to query image existence'
            exit 1
          fi
        fi
    - name: fail if build required
      if: inputs.forbid_build && !steps.check-existing.outputs.exists
      shell: bash
      run: |
        echo image does not exist and forbid_build is set
        exit 1
