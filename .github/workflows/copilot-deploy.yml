# Deploy a project using AWS Copilot, with support for assuming an IAM role using AWS key/secret creds.
name: Copilot Deploy

on:
  workflow_call:
    inputs:
      git_ref:
        description: The git ref (tag, branch, commit SHA, etc) to deploy. Defaults to the current ref.
        required: false
        type: string
      environment:
        description: The app environment to deploy to
        required: true
        type: string
      service:
        description: The copilot service to deploy (if more than one in the repo)
        required: false
        type: string
      role_to_assume:
        description: The IAM role to assume using the key/secret creds
        required: true
        type: string
      aws_region:
        required: false
        type: string
        default: us-west-2
      post_deploy_exec:
        description: Post-deploy command to run with `copilot svc exec`
        required: false
        type: string
      second_role_to_assume:
        description: A 2nd IAM role in the chain
        required: false
        type: string
    secrets:
      AWS_ACCESS_KEY_ID:
        required: false
      AWS_SECRET_ACCESS_KEY:
        required: false

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}

    steps:
      - name: Install Deps
        if: ${{ inputs.post_deploy_exec }}
        run: sudo apt-get install -y expect

      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ inputs.git_ref }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ inputs.aws_region }}
          role-to-assume: ${{ inputs.role_to_assume }}
          role-duration-seconds: 3600
          role-session-name: GithubActionDeploy

      - name: Configure AWS Credentials pt2
        if: ${{ inputs.second_role_to_assume }}
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ inputs.aws_region }}
          role-to-assume: ${{ inputs.second_role_to_assume }}
          role-duration-seconds: 3600
          role-session-name: GithubActionDeploy
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ env.AWS_SESSION_TOKEN }}

      - name: Setup AWS Copilot
        uses: flemzord/setup-aws-copilot@v1.3

      - name: Copilot Deploy
        run: copilot deploy -e ${{ inputs.environment }} ${{ inputs.service && format('-n {0}', inputs.service) }}

      - name: Post-Deploy
        if: ${{ inputs.post_deploy_exec }}
        # AWS SSM doesn't like non-TTY shells, this workaround
        # is discussed at https://github.com/aws/amazon-ssm-agent/issues/354
        run: unbuffer copilot svc exec -e ${{ inputs.environment }} ${{ inputs.service && format('-n {0}', inputs.service) }} -c '${{ inputs.post_deploy_exec }}'
